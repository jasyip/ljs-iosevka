$$include '../../meta/macros.ptl'

import [mix linreg clamp fallback] from "@iosevka/util"
import [DependentSelector] from "@iosevka/glyph/relation"

glyph-module

glyph-block Letter-Armenian-Lower-U-Group : begin
	glyph-block-import CommonShapes
	glyph-block-import Common-Derivatives
	glyph-block-import Letter-Shared-Shapes : nShoulder nShoulderKnots SerifFrame
	glyph-block-import Letter-Armenian-Shared-Shapes : ArmHBar TwoNeck
	glyph-block-import Letter-Latin-U : USerifs
	glyph-block-import Letter-Latin-Lower-M : SmallMArches

	# Common Params
	define barPos : XH / 2
	define highBarPos XH
	define jut Jut

	do "Turned Ayb"
		create-glyph 'armn/aybTurned' 0x560 : glyph-proc
			local df : include : DivFrame para.diversityM 3
			include : df.markSet.e
			include : SmallMArches df XH 0 0 0
			if SLAB : begin
				local sf : SerifFrame.fromDf df XH 0
				include : if para.isItalic
					composite-proc sf.lt.outer sf.rb.outer
					if sf.enoughSpaceForFullSerifs
						composite-proc sf.lt.outer sf.lb.full sf.mb.full sf.rb.full
						composite-proc sf.lt.outer sf.lb.outer sf.rb.outer

	do "Ayb"
		create-glyph 'armn/ayb' 0x561 : glyph-proc
			local df : include : DivFrame para.diversityM 3
			include : df.markSet.e
			include : SmallMArches df XH 0 0 0
			include : FlipAround df.middle (XH / 2)
			if SLAB : begin
				local sf : SerifFrame.fromDf df XH 0
				include : if ([not para.isItalic] && sf.enoughSpaceForFullSerifs)
					composite-proc sf.lt.outer sf.mt.left sf.rt.inner sf.rb.outer
					composite-proc sf.lt.outer sf.rb.outer

	do "Ben"
		create-glyph 'armn/ben' 0x562 : glyph-proc
			local df : include : DivFrame 1
			include : df.markSet.p
			include : VBar.l df.leftSB Descender XH df.mvs
			include : nShoulder
				left -- (df.leftSB + [HSwToV df.mvs])
				right -- df.rightSB
				top -- XH
				bottom -- (XH / 2)
				stroke -- df.mvs
			include : [ArmHBar.normal df 0].base
			if SLAB : begin
				local sf : SerifFrame.fromDf df XH Descender
				include : composite-proc sf.lt.outer sf.lb.fullSide
				if [not para.isItalic] : begin
					local sf2 : SerifFrame.fromDf df XH (XH / 2)
					include sf2.rb.full

	do "Da"
		create-glyph 'armn/da' 0x564 : glyph-proc
			local df : include : DivFrame 1
			include : df.markSet.p
			include : VBar.l df.leftSB 0 XH df.mvs
			include : nShoulder
				left -- (df.leftSB + [HSwToV df.mvs])
				right -- df.rightSB
				top -- XH
				bottom -- Descender
				stroke -- df.mvs
			include : [ArmHBar.right df 0 SLAB].base
			if SLAB : begin
				local sf : SerifFrame.fromDf df XH 0
				local sf2 : SerifFrame.fromDf df XH Descender
				if para.isItalic
					include sf.lt.outer
					include : composite-proc sf.lt.outer sf.lb.full
				include sf2.rb.fullSide

	do "Ech"
		create-glyph 'armn/ech' 0x565 : glyph-proc
			local df : include : DivFrame 1
			include : df.markSet.b
			include : nShoulder
				top -- 0
				bottom -- (-Ascender)
				left -- (df.leftSB + [HSwToV df.mvs])
				right -- df.rightSB
				stroke -- df.mvs
			include : FlipAround df.middle 0
			include : VBar.r df.rightSB 0 [mix 0 XH 0.6] df.mvs
			include : [ArmHBar.normal df 0].high
			if SLAB : include : USerifs.Toothed df Ascender df.mvs
			eject-contour 'serifRT'

	do "Et"
		create-glyph 'armn/et' 0x568 : glyph-proc
			local df : include : DivFrame 1
			include : df.markSet.b
			include : VBar.l df.leftSB Descender XH df.mvs
			include : nShoulder
				left -- (df.leftSB + [HSwToV df.mvs])
				right -- df.rightSB
				top -- XH
				bottom -- 0
				stroke -- df.mvs
			include : [ArmHBar.normal df 0].desc
			if SLAB : begin
				local sf : SerifFrame.fromDf df XH Descender
				local sf2 : SerifFrame.fromDf df XH 0
				include sf.lt.outer
				include : if para.isItalic sf2.rb.outer sf2.rb.full

	do "Ini"
		create-glyph 'armn/ini' 0x56B : glyph-proc
			local df : include : DivFrame 1
			include : df.markSet.bp
			include : VBar.l df.leftSB Descender Ascender df.mvs
			include : nShoulder
				left -- (df.leftSB + [HSwToV df.mvs])
				right -- df.rightSB
				top -- XH
				bottom -- 0
				stroke -- df.mvs
			if SLAB : begin
				local sf : SerifFrame.fromDf df Ascender Descender
				local sf2 : SerifFrame.fromDf df XH 0
				include : composite-proc sf.lt.outer sf.lb.fullSide
				include : if para.isItalic sf2.rb.outer sf2.rb.full

	do "Xeh"
		create-glyph 'armn/xeh' 0x56D : glyph-proc
			local df : include : DivFrame para.diversityM 3
			include : df.markSet.bp
			include : nShoulder
				top -- XH
				bottom -- (XH / 2)
				left -- (df.leftSB + [HSwToV df.mvs])
				right -- (df.middle + [HSwToV : df.mvs / 2])
				stroke -- df.mvs
			include : FlipAround df.middle (XH / 2)
			include : nShoulder
				top -- XH
				bottom -- (XH / 2)
				left -- (df.leftSB + [HSwToV df.mvs])
				right -- (df.middle + [HSwToV : df.mvs / 2])
				stroke -- df.mvs
			include : VBar.l df.leftSB Descender Ascender df.mvs
			include : VBar.r df.rightSB 0 XH df.mvs
			if SLAB : begin
				local sf : SerifFrame.fromDf df Ascender Descender
				local sf2 : SerifFrame.fromDf df XH 0
				include : composite-proc sf.lt.outer sf.lb.fullSide
				if ([not para.isItalic] && sf2.enoughSpaceForFullSerifs)
					include : composite-proc sf2.rt.inner sf2.rb.outer
					include sf2.rb.outer

	do "Ken"
		create-glyph 'armn/ken' 0x56F : glyph-proc
			local df : include : DivFrame 1
			include : df.markSet.bp
			include : nShoulder
				top -- 0
				bottom -- (-Ascender)
				left -- (df.leftSB + [HSwToV df.mvs])
				right -- df.rightSB
				stroke -- df.mvs
			include : FlipAround df.middle 0
			include : VBar.r df.rightSB Descender XH df.mvs
			if SLAB : begin
				local sf : SerifFrame.fromDf df Ascender 0
				local sf2 : SerifFrame.fromDf df XH Descender
				include sf.lt.outer
				if para.isItalic
					include sf2.rb.fullSide
					include : composite-proc sf2.rt.inner sf2.rb.fullSide

	do "Ho"
		create-glyph 'armn/ho' 0x570 : glyph-proc
			local df : include : DivFrame 1
			include : df.markSet.b
			include : VBar.l df.leftSB 0 Ascender df.mvs
			include : nShoulder
				left -- (df.leftSB + [HSwToV df.mvs])
				right -- df.rightSB
				top -- XH
				bottom -- 0
				stroke -- df.mvs
			if SLAB : begin
				local sf : SerifFrame.fromDf df Ascender 0
				include : if para.isItalic
					composite-proc sf.lt.outer sf.rb.outer
					composite-proc sf.lt.outer sf.lb.full sf.rb.full

	do "Ghat"
		create-glyph 'armn/ghat' 0x572 : glyph-proc
			local df : include : DivFrame 1
			include : df.markSet.p
			include : VBar.l df.leftSB 0 XH df.mvs
			include : nShoulder
				left -- (df.leftSB + [HSwToV df.mvs])
				right -- df.rightSB
				top -- XH
				bottom -- Descender
				stroke -- df.mvs
			include : [ArmHBar.right df 0 SLAB].desc
			if SLAB : begin
				local sf : SerifFrame.fromDf df XH 0
				include sf.lt.outer
				if [not para.isItalic] : include sf.lb.full

	do "Men"
		create-glyph 'armn/men' 0x574 : glyph-proc
			local df : include : DivFrame 1
			include : df.markSet.b
			include : nShoulder
				top -- 0
				bottom -- (-XH)
				left -- (df.leftSB + [HSwToV df.mvs])
				right -- df.rightSB
				stroke -- df.mvs
			include : FlipAround df.middle 0
			include : VBar.r df.rightSB 0 Ascender df.mvs
			include : [ArmHBar.right df 0 SLAB].top
			if SLAB : begin
				local sf : SerifFrame.fromDf df XH 0
				local sf2 : SerifFrame.fromDf df Ascender 0
				include : composite-proc sf.lt.outer sf2.rb.outer

	do "Nu"
		create-glyph 'armn/nu' 0x576 : glyph-proc
			local df : include : DivFrame 1
			include : df.markSet.b
			include : nShoulder
				top -- 0
				bottom -- (-Ascender)
				left -- (df.leftSB + [HSwToV df.mvs])
				right -- df.rightSB
				stroke -- df.mvs
			include : FlipAround df.middle 0
			include : VBar.r df.rightSB 0 XH df.mvs
			include : [ArmHBar.left df 0 SLAB].top
			if SLAB : begin
				local sf : SerifFrame.fromDf df XH 0
				include sf.rb.outer
				if [not para.isItalic] : include sf.rt.inner

	do "Vo"
		create-glyph 'armn/vo' 0x578 : glyph-proc
			local df : include : DivFrame 1
			include : df.markSet.e
			include : VBar.l df.leftSB 0 XH df.mvs
			include : nShoulder
				left -- (df.leftSB + [HSwToV df.mvs])
				right -- df.rightSB
				top -- XH
				bottom -- 0
				stroke -- df.mvs
			if SLAB : begin
				local sf : SerifFrame.fromDf df XH 0
				include : if para.isItalic
					composite-proc sf.lt.outer sf.rb.outer
					composite-proc sf.lt.outer sf.lb.full sf.rb.full

	do "Peh"
		create-glyph 'armn/peh' 0x57A : glyph-proc
			local df : include : DivFrame para.diversityM 3
			include : df.markSet.p
			include : SmallMArches df XH 0 0 0
			include : FlipAround df.middle (XH / 2)
			include : VBar.r df.rightSB Descender XH df.mvs
			if SLAB : begin
				local sf : SerifFrame.fromDf df XH Descender
				include : if ([not para.isItalic] && sf.enoughSpaceForFullSerifs)
					composite-proc sf.lt.outer sf.mt.left sf.rt.inner sf.rb.fullSide
					composite-proc sf.lt.outer sf.rb.fullSide

	do "Rra"
		create-glyph 'armn/rra' 0x57C : glyph-proc
			local df : include : DivFrame 1
			include : df.markSet.e
			include : VBar.l df.leftSB 0 XH df.mvs

			# Combination of nShoulderKnots and the straight 2 shape
			local fine : df.mvs * (ShoulderFine / Stroke)
			local left : Math.max (df.rightSB - [HSwToV df.mvs] - jut) df.middle
			include : dispiro
				widths.rhs fine
				flat (df.leftSB + [HSwToV : df.mvs - fine]) (XH - SmallArchDepthA - TINY)
				curl (df.leftSB + [HSwToV : df.mvs - fine]) (XH - SmallArchDepthA)
				arch.rhs XH (sw -- df.mvs) (swBefore -- fine)
				TwoNeck df XH 0 left
			include : HBar.b left (left + [HSwToV df.mvs] + jut) 0 df.mvs
			if SLAB : begin
				local sf : SerifFrame.fromDf df XH 0
				include sf.lt.outer
				if [not para.isItalic] : begin
					include : composite-proc sf.lb.outer

			# Alternate straight 'n' form
			# include : nShoulder
			# 	left -- (df.leftSB + [HSwToV df.mvs])
			# 	right -- df.rightSB
			# 	top -- XH
			# 	bottom -- 0
			# 	stroke -- df.mvs
			# include : [ArmHBar.right df 0 SLAB].base
			# if SLAB : begin
			# 	local sf : SerifFrame.fromDf df XH 0
			# 	include sf.lt.outer
			# 	if [not para.isItalic] : begin
			# 		include : composite-proc sf.lb.full

	do "Seh"
		create-glyph 'armn/seh' 0x57D : glyph-proc
			local df : include : DivFrame 1
			include : df.markSet.e
			include : nShoulder
				top -- 0
				bottom -- (-XH)
				left -- (df.leftSB + [HSwToV df.mvs])
				right -- df.rightSB
				stroke -- df.mvs
			include : FlipAround df.middle 0
			include : VBar.r df.rightSB 0 XH df.mvs
			if SLAB : begin
				local sf : SerifFrame.fromDf df XH 0
				include : if para.isItalic
					composite-proc sf.lt.outer sf.rb.outer
					composite-proc sf.lt.outer sf.rt.inner sf.rb.outer

	do "Vew"
		create-glyph 'armn/vew' 0x57E : glyph-proc
			local df : include : DivFrame 1
			include : df.markSet.bp
			include : nShoulder
				top -- 0
				bottom -- (-XH)
				left -- (df.leftSB + [HSwToV df.mvs])
				right -- df.rightSB
				stroke -- df.mvs
			include : FlipAround df.middle 0
			include : VBar.r df.rightSB Descender Ascender df.mvs
			include : [ArmHBar.right df 0 SLAB].desc

			if SLAB : begin
				local sf : SerifFrame.fromDf df XH 0
				local sf2 : SerifFrame.fromDf df Ascender Descender
				include : composite-proc sf.lt.outer sf2.rt.inner

	do "Tiun"
		create-glyph 'armn/tiun' 0x57F : glyph-proc
			local df : include : DivFrame para.diversityM 3
			include : df.markSet.e
			include : nShoulder
				top -- XH
				bottom -- 0
				left -- (df.middle + [HSwToV : df.mvs / 2])
				right -- df.rightSB
				stroke -- df.mvs
			include : FlipAround df.middle (XH / 2)
			include : nShoulder
				top -- XH
				bottom -- 0
				left -- (df.middle + [HSwToV : df.mvs / 2])
				right -- df.rightSB
				stroke -- df.mvs
			include : VBar.m df.middle 0 XH df.mvs
			if SLAB : begin
				local sf : SerifFrame.fromDf df XH 0
				include : if ([not para.isItalic] && sf.enoughSpaceForFullSerifs)
					composite-proc sf.lt.outer sf.mt.left sf.mb.right sf.rb.full
					composite-proc sf.lt.outer sf.rb.outer

	do "Reh"
		create-glyph 'armn/reh' 0x580 : glyph-proc
			local df : include : DivFrame 1
			include : df.markSet.b
			include : nShoulder
				top -- XH
				bottom -- 0
				left -- (df.leftSB + [HSwToV df.mvs])
				right -- df.rightSB
				stroke -- df.mvs
			include : VBar.l df.leftSB Descender XH df.mvs
			if SLAB : begin
				local sf : SerifFrame.fromDf df XH Descender
				local sf2 : SerifFrame.fromDf df XH 0
				include : composite-proc sf.lt.outer sf.lb.fullSide
				include : if para.isItalic sf2.rb.outer sf2.rb.full

	do "P'iur"
		create-glyph 'armn/piur' 0x583 : glyph-proc
			local df : include : DivFrame para.diversityM 3
			include : df.markSet.bp
			include : nShoulder
				top -- XH
				bottom -- 0
				left -- (df.middle + [HSwToV : df.mvs / 2])
				right -- df.rightSB
				stroke -- df.mvs
			include : FlipAround df.middle (XH / 2)
			include : nShoulder
				top -- XH
				bottom -- 0
				left -- (df.middle + [HSwToV : df.mvs / 2])
				right -- df.rightSB
				stroke -- df.mvs
			include : VBar.m df.middle Descender Ascender df.mvs
			if SLAB : begin
				local sf : SerifFrame.fromDf df XH 0
				local sf2 : SerifFrame.fromDf df Ascender Descender
				include : if ([not para.isItalic] && sf.enoughSpaceForFullSerifs)
					composite-proc sf.lt.outer sf.rb.full
					composite-proc sf.lt.outer sf.rb.outer
				include : composite-proc sf2.mt.left sf2.mb.full

	do "Ew"
		create-glyph 'armn/ew' 0x587 : glyph-proc
			local df : include : DivFrame para.diversityM 3
			include : df.markSet.b
			include : nShoulder
				top -- 0
				bottom -- (-Ascender)
				left -- (df.middle + [HSwToV : df.mvs / 2])
				right -- df.rightSB
				stroke -- df.mvs
			include : FlipAround df.middle 0
			include : VBar.m df.middle 0 XH df.mvs
			include : HBar.b df.middle df.rightSB 0 df.mvs
			if SLAB : begin
				local sf : SerifFrame.fromDf df Ascender 0
				local sf2 : SerifFrame.fromDf df XH 0
				include sf.lt.outer
				if ([not para.isItalic] && sf2.enoughSpaceForFullSerifs) : begin
					include sf2.mt.left
